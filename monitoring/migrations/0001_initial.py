# Generated by Django 4.2.7

from django.db import migrations, models
import django.core.validators
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='App名称')),
                ('platform', models.CharField(choices=[('ios', 'iOS'), ('android', 'Android')], max_length=10, verbose_name='平台')),
                ('bundle_id', models.CharField(max_length=200, unique=True, verbose_name='Bundle ID / Package Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='启用监控')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': 'App',
                'verbose_name_plural': 'Apps',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('ios', 'Apple App Store Connect'), ('android', 'Google Play Console')], max_length=10, unique=True, verbose_name='平台')),
                ('_config_data', models.TextField(verbose_name='加密配置数据')),
                ('is_active', models.BooleanField(default=True, verbose_name='启用')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '平台凭证',
                'verbose_name_plural': '平台凭证',
            },
        ),
        migrations.CreateModel(
            name='DataRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='数据日期')),
                ('downloads', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='下载量')),
                ('sessions', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='活跃会话数')),
                ('deletions', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='卸载量')),
                ('unique_devices', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='活跃独立设备数')),
                # 下载来源细分数据
                ('downloads_app_store_search', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='App Store搜索下载量')),
                ('downloads_web_referrer', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='网页推荐下载量')),
                ('downloads_app_referrer', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='应用推荐下载量')),
                ('downloads_app_store_browse', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='App Store浏览下载量')),
                ('downloads_institutional', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='机构采购下载量')),
                ('downloads_other', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='其他渠道下载量', help_text='包含Unavailable等未分类来源')),
                ('revenue', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='收入')),
                ('rating', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='评分')),
                ('raw_data', models.JSONField(default=dict, help_text='从API获取的原始JSON数据', verbose_name='原始数据')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='记录时间')),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitoring.app', verbose_name='App')),
            ],
            options={
                'verbose_name': '数据记录',
                'verbose_name_plural': '数据记录',
                'ordering': ['-date', 'app'],
            },
        ),
        migrations.CreateModel(
            name='DailyReportConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lark_webhook_daily', models.URLField(help_text='日常报告通知Webhook地址', verbose_name='Lark日报Webhook')),
                ('lark_sheet_id', models.CharField(blank=True, help_text='存储数据的Lark表格ID', max_length=200, verbose_name='Lark表格ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='启用日报')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('app', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='monitoring.app', verbose_name='App')),
            ],
            options={
                'verbose_name': '日报配置',
                'verbose_name_plural': '日报配置',
            },
        ),
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric', models.CharField(choices=[('downloads', '下载量'), ('sessions', '活跃会话数'), ('deletions', '卸载量'), ('unique_devices', '活跃独立设备数')], max_length=20, verbose_name='监控指标')),
                ('comparison_type', models.CharField(choices=[('dod', '日环比 (DOD)'), ('wow', '周同比 (WOW)'), ('absolute', '绝对值')], default='dod', max_length=10, verbose_name='比较类型')),
                ('threshold_min', models.FloatField(blank=True, help_text='低于此值触发告警，例如：-20 表示下跌超过20%', null=True, validators=[django.core.validators.MinValueValidator(-1000)], verbose_name='下限阈值 (%)')),
                ('threshold_max', models.FloatField(blank=True, help_text='高于此值触发告警，例如：200 表示增长超过200%', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='上限阈值 (%)')),
                ('is_active', models.BooleanField(default=True, verbose_name='启用告警')),
                ('lark_webhook_alert', models.URLField(blank=True, help_text='专用告警通知Webhook地址', verbose_name='Lark告警Webhook')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='monitoring.app', verbose_name='App')),
            ],
            options={
                'verbose_name': '告警规则',
                'verbose_name_plural': '告警规则',
            },
        ),
        migrations.CreateModel(
            name='AlertLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('threshold', '阈值告警'), ('error', '错误告警')], max_length=20, verbose_name='告警类型')),
                ('metric', models.CharField(blank=True, max_length=20, verbose_name='相关指标')),
                ('message', models.TextField(verbose_name='告警消息')),
                ('current_value', models.FloatField(blank=True, null=True, verbose_name='当前值')),
                ('threshold_value', models.FloatField(blank=True, null=True, verbose_name='阈值')),
                ('is_sent', models.BooleanField(default=False, verbose_name='已发送')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='发送时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('app', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring.app', verbose_name='App')),
            ],
            options={
                'verbose_name': '告警日志',
                'verbose_name_plural': '告警日志',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='任务名称')),
                ('task_type', models.CharField(choices=[('data_collection', '数据采集'), ('full_analysis', '完整分析'), ('alert_check', '告警检查')], default='data_collection', max_length=20, verbose_name='任务类型')),
                ('frequency', models.CharField(choices=[('daily', '每日'), ('weekly', '每周'), ('monthly', '每月')], default='daily', max_length=10, verbose_name='执行频率')),
                ('hour', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(23)], verbose_name='执行小时 (0-23)')),
                ('minute', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(59)], verbose_name='执行分钟 (0-59)')),
                ('weekday', models.IntegerField(blank=True, help_text='仅当频率为每周时有效', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)], verbose_name='星期几 (0=Monday)')),
                ('day_of_month', models.IntegerField(blank=True, help_text='仅当频率为每月时有效', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='月份中的第几天')),
                ('is_active', models.BooleanField(default=True, verbose_name='启用')),
                ('skip_notifications', models.BooleanField(default=False, verbose_name='跳过通知')),
                ('retry_count', models.IntegerField(default=3, verbose_name='失败重试次数')),
                ('timeout_minutes', models.IntegerField(default=30, verbose_name='超时时间(分钟)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('app', models.ForeignKey(blank=True, help_text='不指定则对所有活跃App执行', null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring.app', verbose_name='关联App')),
            ],
            options={
                'verbose_name': '任务调度',
                'verbose_name_plural': '任务调度',
                'ordering': ['hour', 'minute', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TaskExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_type', models.CharField(choices=[('scheduled', '定时触发'), ('manual', '手动触发'), ('retry', '重试执行')], default='scheduled', max_length=10, verbose_name='触发方式')),
                ('status', models.CharField(choices=[('pending', '等待中'), ('running', '执行中'), ('success', '成功'), ('failed', '失败'), ('timeout', '超时'), ('cancelled', '已取消')], default='pending', max_length=10, verbose_name='执行状态')),
                ('target_date', models.DateField(blank=True, null=True, verbose_name='目标日期')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('duration_seconds', models.IntegerField(blank=True, null=True, verbose_name='执行时长(秒)')),
                ('success_count', models.IntegerField(default=0, verbose_name='成功处理数量')),
                ('error_count', models.IntegerField(default=0, verbose_name='失败处理数量')),
                ('alerts_generated', models.IntegerField(default=0, verbose_name='生成告警数量')),
                ('notifications_sent', models.IntegerField(default=0, verbose_name='发送通知数量')),
                ('output_log', models.TextField(blank=True, verbose_name='执行日志')),
                ('error_log', models.TextField(blank=True, verbose_name='错误日志')),
                ('retry_count', models.IntegerField(default=0, verbose_name='已重试次数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('app', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring.app', verbose_name='执行App')),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='monitoring.taskschedule', verbose_name='任务调度')),
            ],
            options={
                'verbose_name': '任务执行记录',
                'verbose_name_plural': '任务执行记录',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='datarecord',
            unique_together={('app', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='alertrule',
            unique_together={('app', 'metric', 'comparison_type')},
        ),
    ]